#if !defined(_ssas_)
#  define _ssas_

class model_data : public ad_comm{
  data_vector lambda;
  data_int nyrs_r;
  init_adstring datafile;
  init_adstring R_output;
  data_int nsel_coff;
  data_int nsel_changes;
  data_ivector yrs_sel_changes;
  data_int nyrs;
  data_int nages;
  data_int nyrs_surv1;
  data_int nages_surv1;
  data_int nyrs_surv2;
  data_int nages_surv2;
  data_matrix obs_catch_at_age;
  data_matrix obs_surv1_at_age;
  data_matrix obs_surv2_at_age;
  data_number M;
  data_matrix weight_at_age;
  data_matrix mat_at_age;
  data_matrix denom_res_mat;
  data_matrix denom_res_mat_surv1;
  data_matrix denom_res_mat_surv2;
  dvector ages;
  dvector ages4plus;
  dvector years;
  int pred_year;
  dvector yield_obs;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_vector log_sel_coff;
  param_init_bounded_matrix log_sel_dev;
  param_init_number log_mean_F;
  param_init_bounded_dev_vector log_fy_devs;
  param_init_number log_mean_recruit;
  param_init_bounded_dev_vector log_recruit_devs;
  param_init_vector log_initpop_devs;
  param_init_bounded_vector log_q1;
  param_init_bounded_vector log_q2;
  param_init_bounded_number log_alfa;
  param_init_bounded_number log_beta;
  param_matrix log_sel;
  param_vector avgsel_fsh;
  param_vector log_fy;
  param_matrix F;
  param_matrix Z;
  param_matrix S;
  param_matrix N;
  param_matrix C;
  param_matrix U1;
  param_matrix U2;
  param_vector neg_log_like;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value ObjFun;
  param_number recsum;
  param_number initsum;
  param_vector B4;
  param_vector hr;
  param_number avg_F;
  param_vector yield_pred;
  param_stddev_vector Fbar;
  param_stddev_vector ssb;
  param_stddev_vector ssb_m3;
  param_stddev_vector rec;
  param_stddev_vector rec_m3;
  param_vector pred_rec_m3;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void get_mortality_and_survivial_rates(void);
  void get_numbers_at_age(void);
  void get_catch_at_age(void);
  void get_survey1_at_age(void);
  void get_survey2_at_age(void);
  void ssb_rec_ricker(void);
  void evaluate_the_objective_function(void);
  void Concentrated_Likelihoods(void);
  void write_mcmc(void);
  void write_out(void);

};
#endif
